generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int         @id @default(autoincrement())
  name  RoleName    @unique
  users User_Role[]
}

enum RoleName {
  USER
  ADMIN
  MANAGER
  ANALYST
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  lastname  String?
  nickname  String?  @unique
  age       Int?
  email     String   @unique
  password  String
  avatar    String?  @default("./uploads/default-profile-logo.jpg")
  isBanned  Boolean? @map("is_banned")
  banReason String?  @map("ban_reason")
  createdAt DateTime @default(now()) @map("created_at")
  teamId    Int?     @map("team_id")

  roles        User_Role[]
  ratings      User_Rating[]
  result       Result[]
  Team         Team?          @relation(fields: [teamId], references: [id])
  Analysis     Analysis[]
  User_Invites User_Invites[]
}

model User_Role {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int  @map("role_id")

  @@unique([userId, roleId])
}

model User_Rating {
  id     Int @id @default(autoincrement())
  userId Int @map("user_id")
  points Int @default(dbgenerated("LEAST(2000, GREATEST(0))"))

  user User @relation(fields: [userId], references: [id])

  @@unique([userId])
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String   @unique()
  logo      String?  @default("./uploads/default-team-logo.jpg")
  createdAt DateTime @default(now()) @map("created_at")

  user           User[]
  ratings        Team_Rating[]
  team_list      Teams_List[]
  result         Result[]
  User_Invites   User_Invites[]
  matchesAsTeam1 Match[]        @relation("Team1Relation")
  matchesAsTeam2 Match[]        @relation("Team2Relation")
  wins           Match[]        @relation("TeamWinRelation")
}

model User_Invites {
  id     Int          @id @default(autoincrement())
  user   User         @relation(fields: [userId], references: [id])
  userId Int          @map("user_id")
  teamId Int          @map("team_id")
  Team   Team         @relation(fields: [teamId], references: [id])
  status InviteStatus

  @@unique([userId, teamId])
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Team_Rating {
  id     Int @id @default(autoincrement())
  teamId Int @map("team_id")
  points Int @default(dbgenerated("LEAST(2000, GREATEST(0))"))

  team Team @relation(fields: [teamId], references: [id])

  @@unique([teamId])
}

model Teams_List {
  id           Int @id @default(autoincrement())
  teamId       Int @map("team_id")
  tournamentId Int @map("tournament_id")
  stage        Int
  placement    Int

  team        Team       @relation(fields: [teamId], references: [id])
  tournamnent Tournament @relation(fields: [tournamentId], references: [id])
}

model Tournament {
  id                   Int              @id @default(autoincrement())
  name                 String           @unique
  prizePool            Int?             @default(0) @map("prize_pool")
  type                 TournamentType   @map("type")
  teamCount            Int              @map("team_count")
  date                 DateTime
  minRating            Int?             @map("min_rating")
  maxRating            Int?             @map("max_rating")
  arenaId              Int?             @map("arena_id")
  status               TournamentStatus
  registrationClosedAt DateTime         @map("registration_closed_at")

  arena     Arens?       @relation(fields: [arenaId], references: [id])
  result    Result[]
  matches   Match[]
  team_list Teams_List[]
}

enum TournamentStatus {
  PLANNED
  ONGOING
  FINISHED
  CANCELLED
}

enum TournamentType {
  ONLINE
  OFFLINE
}

model Arens {
  id       Int    @id @default(autoincrement())
  name     String
  location String
  capacity Int

  tournament Tournament[]
}

model Result {
  id           Int  @id @default(autoincrement())
  placement    Int
  tournamentId Int  @map("tournament_id")
  userId       Int? @map("user_id")
  teamId       Int? @map("team_id")

  tournament Tournament @relation(fields: [tournamentId], references: [id])
  user       User?      @relation(fields: [userId], references: [id])
  team       Team?      @relation(fields: [teamId], references: [id])
}

model Match {
  id                  String   @id
  team1Id             Int?     @map("team1_id")
  team2Id             Int?     @map("team2_id")
  nextMatchId         String?  @map("next_match_id")
  teamWinId           Int?     @map("team_win_id")
  tournamentRoundText String   @map("tournament_round_text")
  startTime           DateTime @map("start_time")
  tournamentId        Int      @map("tournament_id")
  map                 String?
  state               String
  team1RoundsWon      Int?     @map("team1_rounds_won")
  team2RoundsWon      Int?     @map("team2_rounds_won")

  team1      Team?      @relation("Team1Relation", fields: [team1Id], references: [id])
  team2      Team?      @relation("Team2Relation", fields: [team2Id], references: [id])
  teamWin    Team?      @relation("TeamWinRelation", fields: [teamWinId], references: [id])
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  analysis   Analysis[]
}

model Analysis {
  id      Int    @id @default(autoincrement())
  image   String
  text    String
  matchId String @map("match_id")
  userId  Int    @map("user_id")

  match Match @relation(fields: [matchId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}
